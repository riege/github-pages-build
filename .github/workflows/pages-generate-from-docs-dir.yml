name: Deploy static content from /docs to GitHub Pages

on: # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      from1:
        required: false
        type: string
        description: "Optional subdirectory to copy into docs, it will do cp -r inputs.from1/* build/docs/inputs.to1"
      to1:
        required: false
        type: string
        description: "Optional but required if from1 is provided: Target directly under 'docs/' to copy into"
      from2:
        required: false
        type: string
        description: "Optional 2nd subdirectory into docs, it will do cp -r inputs.from2/* build/docs/inputs.to2"
      to2:
        required: false
        type: string
        description: "Optional but required if from2 is provided: Target directly under 'docs/' to copy into"

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
#permissions:
#  contents: read
#  pages: write
#  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Generate Pages content
        run: |
          cd ${{ github.workspace }}
          mkdir -p build
          cp -r docs build/
          ## mkdir -p build/docs/schemas
          ## cp -r src/main/resources/schemas/* build/docs/schemas/
          #   at his point, "build/docs" contains folders
          #   index.md, examples (from docs)
          #   _layouts, assets (also from docs, should be from a template dir)
          ##   schemas (content = src/main/resources/schemas/*)

      - name: Checkout blueprints
        uses: actions/checkout@v5
        with:
          repository: riege/github-pages-build
          sparse-checkout: pages-layout
          path: _github-pages-build

      - name: Apply blueprints
        run: |
          # Example when this is invoked from a repo playground-mskopp2:
          # github.workspace = /home/runner/work/playground-mskopp2/playground-mskopp2
          #   it contains the checked out repository playground-mskopp2
          #   plus the contant of riege/github-pages-build
          #   limited to root folder files plus sub directlry pages-layout
          #   witin the folder named _github-pages-build
          # So ${{ github.workspace }}/_github-pages-build/pages-layout
          # contains the _layouts and assets folder.
          #
          cd ${{ github.workspace }}
          mkdir -p build/docs
          cp -r _github-pages-build/pages-layout/* build/docs
          cp -r docs/* build/docs
          ### mkdir -p build/docs/schemas
          ### cp -r src/main/resources/schemas/* build/docs/schemas/
          #   at his point, "build/docs" contains folders
          #   index.md, examples (from docs)
          #   _layouts, assets (also from docs, should be from a template dir)
          ###   schemas (content = src/main/resources/schemas/*)

      - name: Copy recursively FROM1 to TO1, e.g. from1=src/main/resources/schemas to1=schemas
        # another option to do the copy is replacing the 'run: mkdir.. cp ..'
        # workflow with a programmed action, which could be:
        # uses: canastro/copy-action@0.0.2 with: source: "${{ inputs.from1 }}/" target: "build/docs/${{ inputs.to1 }}/"
        if: ${{ inputs.from1 }}
        run: |
          mkdir -p build/docs/${{ inputs.to1 }}
          cp -r ${{ inputs.from1 }}/* build/docs/${{ inputs.to1 }}/

      - name: Copy recursively FROM2 to TO2, e.g. from2=src/main/resources/schemas to2=schemas
        if: ${{ inputs.from2 }}
        run: |
          mkdir -p build/docs/${{ inputs.to2 }}
          cp -r ${{ inputs.from2 }}/* build/docs/${{ inputs.to2 }}/

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Build HTML from pages .md and .html
        uses: actions/jekyll-build-pages@v1
        with:
          source: build/docs
          destination: build/pages

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: build/pages

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
